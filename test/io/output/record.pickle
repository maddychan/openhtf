cmutablerecords.records
_UnReduceRecord
p1
(S'TestRecord'
p2
(cmutablerecords.records
RecordClass
p3
t(dp4
S'optional_attributes'
p5
(dp6
S'phases'
p7
c__builtin__
list
p8
sS'start_time_millis'
p9
copenhtf.util
time_millis
p10
sS'outcome_details'
p11
g8
sS'end_time_millis'
p12
NsS'code_info'
p13
NsS'log_records'
p14
g8
sS'outcome'
p15
NsS'metadata'
p16
c__builtin__
dict
p17
ssS'required_attributes'
p18
(S'dut_id'
p19
S'station_id'
p20
tp21
s(S'TestDUT'
p22
S'madsci-mbr'
p23
ttRp24
(dp25
g7
(lp26
g1
(S'PhaseRecord'
p27
(g3
t(dp28
g5
(dp29
g9
NsS'attachments'
p30
g17
sS'measured_values'
p31
NsS'measurements'
p32
NsS'docstring'
p33
Nsg12
NsS'result'
p34
Nssg18
(S'name'
p35
S'codeinfo'
p36
tp37
s(S'hello_world'
p38
g1
(S'CodeInfo'
p39
(g3
t(dp40
g5
(dp41
sg18
(g35
g33
S'sourcecode'
p42
tp43
s(g38
S'A hello world test phase.'
p44
S'@measures(\n    Measurement(\'unset_meas\'),\n    Measurement(\n        \'widget_type\').MatchesRegex(r\'.*Widget$\').Doc(\n            \'\'\'This measurement tracks the type of widgets.\'\'\'),\n    Measurement(\n        \'widget_color\').Doc(\'Color of the widget\'),\n    Measurement(\'widget_size\').InRange(1, 4))\n@plug(example=example_plug.ExamplePlug)\ndef hello_world(test, example):\n  """A hello world test phase."""\n  test.logger.info(\'Hello World!\')\n  test.measurements.widget_type = prompts.DisplayPrompt(\n      \'What\\\'s the widget type?\', text_input=True)\n  if test.measurements.widget_type == \'raise\':\n    raise Exception()\n  test.measurements.widget_color = \'Black\'\n  test.measurements.widget_size = 3\n  test.logger.info(\'Plug value: %s\', example.Increment())\n'
p45
ttRp46
(dbttRp47
(dp48
g9
I1464646487770
sg30
(dp49
sg31
(dp50
S'widget_type'
p51
S'FooWidget'
p52
sS'widget_color'
p53
S'Black'
p54
sS'widget_size'
p55
I3
ssg32
(dp56
g51
g1
(S'Measurement'
p57
(g3
t(dp58
g5
(dp59
S'units'
p60
Nsg15
copenhtf.util.measurements
Outcome
p61
(I3
tRp62
sg33
NsS'dimensions'
p63
NsS'validators'
p64
g8
ssg18
(g35
tp65
s(g51
ttRp66
(dp67
g60
Nsg15
g61
(I1
tRp68
sg33
S'This measurement tracks the type of widgets.'
p69
sg63
Nsg64
(lp70
ccopy_reg
_reconstructor
p71
(copenhtf.util.validators
RegexMatcher
p72
c__builtin__
object
p73
NtRp74
(dp75
S'regex'
p76
S'.*Widget$'
p77
sS'_compiled'
p78
cre
_compile
p79
(g77
I0
tRp80
sbasbsg53
g1
(g57
(g3
t(dp81
g5
g59
sg18
g65
s(g53
ttRp82
(dp83
g60
Nsg15
g68
sg33
S'Color of the widget'
p84
sg63
Nsg64
(lp85
sbsS'unset_meas'
p86
g1
(g57
(g3
t(dp87
g5
g59
sg18
g65
s(g86
ttRp88
(dp89
g60
Nsg15
g62
sg33
Nsg63
Nsg64
(lp90
sbsg55
g1
(g57
(g3
t(dp91
g5
g59
sg18
g65
s(g55
ttRp92
(dp93
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp94
g71
(copenhtf.util.validators
InRange
p95
g73
NtRp96
(dp97
S'minimum'
p98
I1
sS'maximum'
p99
I4
sbasbssg33
Nsg12
I1464646489816
sg34
g71
(copenhtf.exe.phase_executor
PhaseOutcome
p100
c__builtin__
tuple
p101
(copenhtf
PhaseResult
p102
(I1
tRp103
ttRp104
sbag1
(g27
(g3
t(dp105
g5
g29
sg18
g37
s(S'set_measurements'
p106
g1
(g39
(g3
t(dp107
g5
g41
sg18
g43
s(g106
S'Test phase that sets a measurement.'
p108
S"    @plugs.plug(update_kwargs=False, **monitor_plugs)\n    @measurements.measures(\n        measurements.Measurement(measurement_name).WithUnits(\n            units).WithDimensions(uom.UOM['MILLISECOND']))\n    @functools.wraps(phase.func)\n    def MonitoredPhaseFunc(phase_data, *args, **kwargs):\n      # Start monitor thread, it will call monitor.func(phase_data) periodically\n      monitor_thread = _MonitorThread(\n          measurement_name, monitor, phase.extra_kwargs, phase_data,\n          poll_interval_ms)\n      monitor_thread.start()\n      try:\n        return phase(phase_data, *args, **kwargs)\n      finally:\n        monitor_thread.Kill()\n"
p109
ttRp110
(dbttRp111
(dp112
g9
I1464646489817
sg30
(dp113
sg31
(dp114
S'monitor_measurement'
p115
(lp116
(I0
I2
tp117
a(F1001.1370182037354
I3
tp118
a(F2002.1238327026367
I4
tp119
a(F3003.2649040222168
I5
tp120
asS'level_all'
p121
I9
sS'level_none'
p122
I0
sS'level_some'
p123
I8
ssg32
(dp124
g115
g1
(g57
(g3
t(dp125
g5
g59
sg18
g65
s(g115
ttRp126
(dp127
g60
Nsg15
g68
sg33
Nsg63
(g71
(copenhtf.util.units
Unit
p128
g101
(S'C26'
p129
S'ms'
p130
ttRp131
tp132
sg64
(lp133
sbsS'level_all'
p134
g1
(g57
(g3
t(dp135
g5
g59
sg18
g65
s(g134
ttRp136
(dp137
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp138
sbsS'level_none'
p139
g1
(g57
(g3
t(dp140
g5
g59
sg18
g65
s(g139
ttRp141
(dp142
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp143
sbsS'level_some'
p144
g1
(g57
(g3
t(dp145
g5
g59
sg18
g65
s(g144
ttRp146
(dp147
g60
Nsg15
g68
sg33
Nsg63
Nsg64
(lp148
sbssg33
Nsg12
I1464646492838
sg34
g71
(g100
g101
(g103
ttRp149
sbag1
(g27
(g3
t(dp150
g5
g29
sg18
g37
s(g63
g1
(g39
(g3
t(dp151
g5
g41
sg18
g43
s(g63
NS"@measures(\n    Measurement('unset_dims').WithDimensions(UOM['HERTZ']),\n    Measurement('dimensions').WithDimensions(UOM['HERTZ']),\n    Measurement('lots_of_dims').WithDimensions(\n        UOM['HERTZ'], UOM['SECOND'], UOM['RADIAN']))\ndef dimensions(test):\n  for dim in range(5):\n    test.measurements.dimensions[dim] = 1 << dim\n  for x, y, z in zip(range(1, 5), range(21, 25), range (101, 105)):\n    test.measurements.lots_of_dims[x, y, z] = x + y + z\n"
p152
ttRp153
(dbttRp154
(dp155
g9
I1464646492839
sg30
(dp156
sg31
(dp157
S'lots_of_dims'
p158
(lp159
(I1
I21
I101
I123
tp160
a(I2
I22
I102
I126
tp161
a(I3
I23
I103
I129
tp162
a(I4
I24
I104
I132
tp163
asg63
(lp164
(I0
I1
tp165
a(I1
I2
tp166
a(I2
I4
tp167
a(I3
I8
tp168
a(I4
I16
tp169
assg32
(dp170
g158
g1
(g57
(g3
t(dp171
g5
g59
sg18
g65
s(g158
ttRp172
(dp173
g60
Nsg15
g68
sg33
Nsg63
(g71
(g128
g101
(S'HTZ'
p174
S'Hz'
p175
ttRp176
g71
(g128
g101
(S'SEC'
p177
S's'
ttRp178
g71
(g128
g101
(S'C81'
p179
S'rad'
p180
ttRp181
tp182
sg64
(lp183
sbsS'unset_dims'
p184
g1
(g57
(g3
t(dp185
g5
g59
sg18
g65
s(g184
ttRp186
(dp187
g60
Nsg15
g62
sg33
Nsg63
(g71
(g128
g101
(g174
g175
ttRp188
tp189
sg64
(lp190
sbsg63
g1
(g57
(g3
t(dp191
g5
g59
sg18
g65
s(g63
ttRp192
(dp193
g60
Nsg15
g68
sg33
Nsg63
(g71
(g128
g101
(g174
g175
ttRp194
tp195
sg64
(lp196
sbssg33
Nsg12
I1464646492840
sg34
g71
(g100
g101
(g103
ttRp197
sbag1
(g27
(g3
t(dp198
g5
g29
sg18
g37
s(g30
g1
(g39
(g3
t(dp199
g5
g41
sg18
g43
s(g30
NS"def attachments(test):\n  test.Attach('test_attachment', 'This is test attachment data.')\n  test.AttachFromFile('example_attachment.txt')\n"
p200
ttRp201
(dbttRp202
(dp203
g9
I1464646492840
sg30
(dp204
S'test_attachment'
p205
g71
(copenhtf.io.test_record
Attachment
p206
g101
(S'This is test attachment data.'
p207
NttRp208
sS'example_attachment.txt'
p209
g71
(g206
g101
(S'This is a text file attachment.\n'
p210
S'text/plain'
p211
ttRp212
ssg31
(dp213
sg32
(dp214
sg33
Nsg12
I1464646492849
sg34
g71
(g100
g101
(g103
ttRp215
sbasg9
I1464646487769
sg11
(lp216
sg12
I1464646492860
sg13
g1
(g39
(g3
t(dp217
g5
g41
sg18
g43
s(S'all_the_things.py'
p218
S'Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py --config=example_config.yaml'
p219
S'# Copyright 2014 Google Inc. All Rights Reserved.\n\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n"""Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py --config=example_config.yaml\n"""\nimport cPickle as pickle\nimport json\nimport os\nimport time\n\nimport example_plug\nimport openhtf\nimport openhtf.io.output as output\n\nfrom openhtf.io.output import json_factory\nfrom openhtf.names import *\n# Uncomment for mfg-inspector output, requires setup.py build_proto.\n#from openhtf.io.output import mfg_inspector\n\n\n@plug(example=example_plug.ExamplePlug)\ndef example_monitor(example):\n  return example.Increment()\n'
p220
ttRp221
(dbsg14
(lp222
g71
(copenhtf.util.logs
LogRecord
p223
g101
(I20
S'openhtf.test_record'
p224
S'all_the_things.py'
p225
I51
I1464646487770
VHello World!
p226
ttRp227
ag71
(g223
g101
(I20
g224
g225
I58
I1464646489780
VPlug value: 1
p228
ttRp229
ag71
(g223
g101
(I20
S'openhtf.test_record.plugs.ExamplePlug'
p230
S'example_plug.py'
p231
I79
I1464646492849
VTearing down <ExamplePlug: 5>
p232
ttRp233
ag71
(g223
g101
(I10
g224
S'test_state.py'
p234
I164
I1464646492860
VFinishing test execution with outcome FAIL.
p235
ttRp236
asg15
copenhtf.io.test_record
Outcome
p237
(I2
tRp238
sg16
(dp239
S'test_description'
p240
S'OpenHTF Example Test'
p241
sS'test_version'
p242
S'1.0.0'
p243
sS'test_name'
p244
S'MyTest'
p245
ssb.
